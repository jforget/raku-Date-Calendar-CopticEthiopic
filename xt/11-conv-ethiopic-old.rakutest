#
# Checking the conversions with older 0.0.x modules
#
# This does not check that the results are right, this checks that the results are "rightly wrong".
# For the **right** results, see 12-conv-ethiopic-new.rakutest
#

use v6.d;
use Test;
use lib '../version-old/lib';
use lib 'lib';
use Date::Calendar::Strftime:ver<0.1.0>;
use Date::Calendar::Aztec;
use Date::Calendar::Aztec::Cortes;
use Date::Calendar::Bahai;
use Date::Calendar::Bahai::Astronomical;
use Date::Calendar::Coptic;
use Date::Calendar::Ethiopic;
use Date::Calendar::Hebrew;
use Date::Calendar::Hijri;
use Date::Calendar::Gregorian;
use Date::Calendar::FrenchRevolutionary;
use Date::Calendar::FrenchRevolutionary::Arithmetic;
use Date::Calendar::FrenchRevolutionary::Astronomical;
use Date::Calendar::Julian;
use Date::Calendar::Julian::AUC;
use Date::Calendar::Maya;
use Date::Calendar::Maya::Astronomical;
use Date::Calendar::Maya::Spinden;
use Date::Calendar::Persian;
use Date::Calendar::Persian::Astronomical;

my @data-greg = (
       (2017,  3,  5, after-sunset,   'gr', "Wednesday 13 Nov 2024"       , "Rob 04 Hed 2017 ☼", "2024-11-13 shift to previous day", '2024-11-13')
     , (2017,  3,  5, before-sunrise, 'gr', "Thursday 14 Nov 2024"        , "Ham 05 Hed 2017 ☼", "2024-11-14 shift to daylight"    , '2024-11-14')
     , (2017,  3,  5, daylight,       'gr', "Thursday 14 Nov 2024"        , "Ham 05 Hed 2017 ☼", "2024-11-14 no problem"           , '2024-11-14')
            );

my @data-maya = (
       (2017,  2, 13, after-sunset,   'm0', " 6 Zac 11 Akbal"        , "Mak 12 Teq 2017 ☼", "2024-10-22 shift to previous date, wrong clerical date, should be  6 Zac 12 Kan")
     , (2017,  2, 13, before-sunrise, 'm0', " 7 Zac 12 Kan"          , "Rob 13 Teq 2017 ☼", "2024-10-23 wrong intermediate date, should be  6 Zac 12 Kan")
     , (2017,  2, 13, daylight,       'm0', " 7 Zac 12 Kan"          , "Rob 13 Teq 2017 ☼", "2024-10-23 no problem")
     , (2015,  5, 24, after-sunset,   'm1', " 4 Pax 3 Chuen"         , "Mak 23 Ter 2015 ☼", "2023-01-31 shift to previous date, wrong clerical date, should be  4 Pax 4 Eb")
     , (2015,  5, 24, before-sunrise, 'm1', " 5 Pax 4 Eb"            , "Rob 24 Ter 2015 ☼", "2023-02-01 wrong intermediate date, should be  4 Pax 4 Eb")
     , (2015,  5, 24, daylight,       'm1', " 5 Pax 4 Eb"            , "Rob 24 Ter 2015 ☼", "2023-02-01 no problem")
     , (2016,  1, 24, after-sunset,   'm2', " 6 Yax 3 Etznab"        , "Rob 23 Mes 2016 ☼", "2023-10-04 shift to previous date, wrong clerical date, should be  6 Yax 4 Cauac")
     , (2016,  1, 24, before-sunrise, 'm2', " 7 Yax 4 Cauac"         , "Ham 24 Mes 2016 ☼", "2023-10-05 wrong intermediate date, should be  6 Yax 4 Cauac")
     , (2016,  1, 24, daylight,       'm2', " 7 Yax 4 Cauac"         , "Ham 24 Mes 2016 ☼", "2023-10-05 no problem")
     , (2017,  2, 14, after-sunset,   'a0', " 1 Atlcahualo 12 Cuetzpalin", "Rob 13 Teq 2017 ☼", "2024-10-23 shift to previous date, wrong clerical date, should be  1 Atlcahualo 13 Coatl")
     , (2017,  2, 14, before-sunrise, 'a0', " 2 Atlcahualo 13 Coatl" , "Ham 14 Teq 2017 ☼", "2024-10-24 wrong intermediate date, should be  1 Atlcahualo 13 Coatl")
     , (2017,  2, 14, daylight,       'a0', " 2 Atlcahualo 13 Coatl" , "Ham 14 Teq 2017 ☼", "2024-10-24 no problem")
     , (2016, 10,  4, after-sunset,   'a1', "14 Teotleco 10 Malinalli", "San 03 Sen 2016 ☼", "2024-06-10 shift to previous date, wrong clerical date, should be 14 Teotleco 11 Acatl")
     , (2016, 10,  4, before-sunrise, 'a1', "15 Teotleco 11 Acatl"   , "Mak 04 Sen 2016 ☼", "2024-06-11 wrong intermediate date, should be 14 Teotleco 11 Acatl")
     , (2016, 10,  4, daylight,       'a1', "15 Teotleco 11 Acatl"   , "Mak 04 Sen 2016 ☼", "2024-06-11 no problem")
            );

my @data-others = (
       (2014,  8,  3, after-sunset,   'ba', "Jamál 02 Jal 0179"           , "Ihu 02 Miy 2014 ☼", "2022-04-10 shift to previous day")
     , (2014,  8,  3, before-sunrise, 'ba', "Kamál 03 Jal 0179"           , "San 03 Miy 2014 ☼", "2022-04-11 shift to daylight")
     , (2014,  8,  3, daylight,       'ba', "Kamál 03 Jal 0179"           , "San 03 Miy 2014 ☼", "2022-04-11 no problem")
     , (2017, 12, 21, after-sunset,   'be', "Fiḍál 08 Asm 0182"           , "Mak 20 Neh 2017 ☼", "2025-08-26 shift to previous day")
     , (2017, 12, 21, before-sunrise, 'be', "ʻIdál 09 Asm 0182"           , "Rob 21 Neh 2017 ☼", "2025-08-27 shift to daylight")
     , (2017, 12, 21, daylight,       'be', "ʻIdál 09 Asm 0182"           , "Rob 21 Neh 2017 ☼", "2025-08-27 no problem")
     , (2017,  3, 28, after-sunset,   'fr', "Sextidi 16 Fri 0233"         , "Arb 27 Hed 2017 ☼", "2024-12-06 shift to previous day")
     , (2017,  3, 28, before-sunrise, 'fr', "Septidi 17 Fri 0233"         , "Kid 28 Hed 2017 ☼", "2024-12-07 shift to daylight")
     , (2017,  3, 28, daylight,       'fr', "Septidi 17 Fri 0233"         , "Kid 28 Hed 2017 ☼", "2024-12-07 no problem")
     , (2015,  7,  7, after-sunset,   'fa', "Quintidi 25 Vnt 0231"        , "Rob 06 Mag 2015 ☼", "2023-03-15 shift to previous day")
     , (2015,  7,  7, before-sunrise, 'fa', "Sextidi 26 Vnt 0231"         , "Ham 07 Mag 2015 ☼", "2023-03-16 shift to daylight")
     , (2015,  7,  7, daylight,       'fa', "Sextidi 26 Vnt 0231"         , "Ham 07 Mag 2015 ☼", "2023-03-16 no problem")
     , (2016,  4,  5, after-sunset,   'fe', "Tridi 23 Fri 0232"           , "Ham 04 Tah 2016 ☼", "2023-12-14 shift to previous day")
     , (2016,  4,  5, before-sunrise, 'fe', "Quartidi 24 Fri 0232"        , "Arb 05 Tah 2016 ☼", "2023-12-15 shift to daylight")
     , (2016,  4,  5, daylight,       'fe', "Quartidi 24 Fri 0232"        , "Arb 05 Tah 2016 ☼", "2023-12-15 no problem")
     , (2016, 12, 11, after-sunset,   'he', "Yom Shishi 12 Av  5784"      , "Arb 10 Neh 2016 ☼", "2024-08-16 shift to previous day")
     , (2016, 12, 11, before-sunrise, 'he', "Yom Shabbat 13 Av  5784"     , "Kid 11 Neh 2016 ☼", "2024-08-17 shift to daylight")
     , (2016, 12, 11, daylight,       'he', "Yom Shabbat 13 Av  5784"     , "Kid 11 Neh 2016 ☼", "2024-08-17 no problem")
     , (2014,  7, 25, after-sunset,   'hi', "Yaum al-Sabt 29 Sha 1443"    , "Kid 24 Mag 2014 ☼", "2022-04-02 shift to previous day")
     , (2014,  7, 25, before-sunrise, 'hi', "Yaum al-Ahad 01 Ram 1443"    , "Ihu 25 Mag 2014 ☼", "2022-04-03 shift to daylight")
     , (2014,  7, 25, daylight,       'hi', "Yaum al-Ahad 01 Ram 1443"    , "Ihu 25 Mag 2014 ☼", "2022-04-03 no problem")
     , (2016,  6,  4, after-sunset,   'jl', "Sunday 29 Jan 2024"          , "Ihu 03 Yak 2016 ☼", "2024-02-11 shift to previous day")
     , (2016,  6,  4, before-sunrise, 'jl', "Monday 30 Jan 2024"          , "San 04 Yak 2016 ☼", "2024-02-12 shift to daylight")
     , (2016,  6,  4, daylight,       'jl', "Monday 30 Jan 2024"          , "San 04 Yak 2016 ☼", "2024-02-12 no problem")
     , (2017,  7, 18, after-sunset,   'jc', "Wednesday 13 Mar 2778"       , "Rob 17 Mag 2017 ☼", "2025-03-26 shift to previous day")
     , (2017,  7, 18, before-sunrise, 'jc', "Thursday 14 Mar 2778"        , "Ham 18 Mag 2017 ☼", "2025-03-27 shift to daylight")
     , (2017,  7, 18, daylight,       'jc', "Thursday 14 Mar 2778"        , "Ham 18 Mag 2017 ☼", "2025-03-27 no problem")
     , (2015, 10, 19, after-sunset,   'pe', "Yek-shanbe 04 Tir 1402"      , "Ihu 18 Sen 2015 ☼", "2023-06-25 shift to previous day")
     , (2015, 10, 19, before-sunrise, 'pe', "Do shanbe 05 Tir 1402"       , "San 19 Sen 2015 ☼", "2023-06-26 shift to daylight")
     , (2015, 10, 19, daylight,       'pe', "Do shanbe 05 Tir 1402"       , "San 19 Sen 2015 ☼", "2023-06-26 no problem")
     , (2014, 11, 14, after-sunset,   'pa', "Chahar shanbe 29 Tir 1401"   , "Rob 13 Ham 2014 ☼", "2022-07-20 shift to previous day")
     , (2014, 11, 14, before-sunrise, 'pa', "Panj shanbe 30 Tir 1401"     , "Ham 14 Ham 2014 ☼", "2022-07-21 shift to daylight")
     , (2014, 11, 14, daylight,       'pa', "Panj shanbe 30 Tir 1401"     , "Ham 14 Ham 2014 ☼", "2022-07-21 no problem")
            );

my %class =   a0 => 'Date::Calendar::Aztec'
            , a1 => 'Date::Calendar::Aztec::Cortes'
            , ba => 'Date::Calendar::Bahai'
            , be => 'Date::Calendar::Bahai::Astronomical'
            , gr => 'Date::Calendar::Gregorian'
            , co => 'Date::Calendar::Coptic'
            , et => 'Date::Calendar::Ethiopic'
            , fr => 'Date::Calendar::FrenchRevolutionary'
            , fa => 'Date::Calendar::FrenchRevolutionary::Arithmetic'
            , fe => 'Date::Calendar::FrenchRevolutionary::Astronomical'
            , he => 'Date::Calendar::Hebrew'
            , hi => 'Date::Calendar::Hijri'
            , jl => 'Date::Calendar::Julian'
            , jc => 'Date::Calendar::Julian::AUC'
            , m0 => 'Date::Calendar::Maya'
            , m1 => 'Date::Calendar::Maya::Astronomical'
            , m2 => 'Date::Calendar::Maya::Spinden'
            , pe => 'Date::Calendar::Persian'
            , pa => 'Date::Calendar::Persian::Astronomical'
            ;

my %ver   =   a0 => '0.0.3'
            , a1 => '0.0.3'
            , ba => '0.0.2'
            , pe => '0.0.2'
            , be => '0.0.2'
            , co => '0.0.3'
            , et => '0.0.3'
            , fr => '0.0.6'
            , fa => '0.0.6'
            , fe => '0.0.6'
            , gr => '0.0.2'
            , he => '0.0.4'
            , hi => '0.0.2'
            , jl => '0.0.4'
            , jc => '0.0.4'
            , m0 => '0.0.3'
            , m1 => '0.0.3'
            , m2 => '0.0.3'
            , pe => '0.0.2'
            , pa => '0.0.2'
            ;

plan 15 × @data-greg.elems + 12 × @data-others.elems + 12 × @data-maya.elems;

for (|@data-greg, |@data-others) -> $datum {
  my ($year, $month, $day, $daypart, $cal, $str2, $str3, $result) = $datum;
  my Date::Calendar::Ethiopic $d1 .= new(year => $year, month => $month, day => $day, daypart => $daypart);

  # push-push
  my $d2 = $d1.to-date(%class{$cal});
  is($d2.strftime("%A %d %b %Y"), $str2, "testing push to $str2");
  is($d2.^ver, %ver{$cal});
  my $d3 = $d2.to-date(%class<et>);
  is($d3.strftime("%a %d %b %Y %Ep"), $str3, "testing push-push to $str2 and $str3, $result");
  is($d3.^ver.Str.substr(0, 4), '0.1.');

  # push-pull
  my Date::Calendar::Ethiopic $d4 .= new-from-date($d2);
  is($d4.strftime("%a %d %b %Y %Ep"), $str3, "testing push-pull to $str2 and $str3, $result");
  is($d4.^ver.Str.substr(0, 4), '0.1.');

  # pull-push
  my $d5 = ::(%class{$cal}).new-from-date($d1);
  is($d5.strftime("%A %d %b %Y"), $str2, "testing pull to $str2");
  is($d5.^ver, %ver{$cal});
  my $d6 = $d5.to-date(%class<et>);
  is($d6.strftime("%a %d %b %Y %Ep"), $str3, "testing pull-push to $str2 and $str3, $result");
  is($d6.^ver.Str.substr(0, 4), '0.1.');

  # pull-pull
  my Date::Calendar::Ethiopic $d7 .= new-from-date($d5);
  is($d7.strftime("%a %d %b %Y %Ep"), $str3, "testing pull-pull to $str2 and $str3, $result");
  is($d7.^ver.Str.substr(0, 4), '0.1.');
}

for (@data-maya) -> $datum {
  my ($year, $month, $day, $daypart, $cal, $str2, $str3, $result) = $datum;
  my Date::Calendar::Ethiopic $d1 .= new(year => $year, month => $month, day => $day, daypart => $daypart);
  my Str $str1 = $d1.strftime("%a %d %b %Y %Ep");

  # push-push
  my $d2 = $d1.to-date(%class{$cal});
  is($d2.strftime("%e %B %V %A"), $str2, "testing push to $str2");
  is($d2.^ver, %ver{$cal});
  my $d3 = $d2.to-date(%class<et>);
  is($d3.strftime("%a %d %b %Y %Ep"), $str3, "testing push-push $str1 to $str2 and $str3, $result");
  is($d3.^ver.Str.substr(0, 4), '0.1.');

  # push-pull
  my Date::Calendar::Ethiopic $d4 .= new-from-date($d2);
  is($d4.strftime("%a %d %b %Y %Ep"), $str3, "testing push-pull $str1 to $str2 and $str3, $result");
  is($d4.^ver.Str.substr(0, 4), '0.1.');

  # pull-push
  my $d5 = ::(%class{$cal}).new-from-date($d1);
  is($d5.strftime("%e %B %V %A"), $str2, "testing pull to $str2");
  is($d5.^ver, %ver{$cal});
  my $d6 = $d5.to-date(%class<et>);
  is($d6.strftime("%a %d %b %Y %Ep"), $str3, "testing pull-push $str1 to $str2 and $str3, $result");
  is($d6.^ver.Str.substr(0, 4), '0.1.');

  # pull-pull
  my Date::Calendar::Ethiopic $d7 .= new-from-date($d5);
  is($d7.strftime("%a %d %b %Y %Ep"), $str3, "testing pull-pull $str1 to $str2 and $str3, $result");
  is($d7.^ver.Str.substr(0, 4), '0.1.');
}

# Conversion with core class Date: only push-pull tests
for (@data-greg) -> $datum {
  my ($year, $month, $day, $daypart, $cal, $str2, $str3, $result, $str4) = $datum;
  my Date::Calendar::Ethiopic $d1 .= new(year => $year, month => $month, day => $day, daypart => $daypart);

  my $d2 = $d1.to-date('Date');
  is($d2.gist, $str4, "testing push from $year-$month-$day to $str4");
  my Date::Calendar::Ethiopic $d3 .= new-from-date($d2);
  is($d3.strftime("%a %d %b %Y %Ep"), $str3, "testing push-pull from $year-$month-$day to Gregorian $str4 and then $str3, $result");
  is($d3.^ver.Str.substr(0, 4), '0.1.');
}

done-testing;
